<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.github/workflows/dry-run-pack.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/dry-run-pack.yml" />
              <option name="originalContent" value="name: Dry Run Package Build&#10;&#10;on:&#10;  workflow_dispatch:&#10;&#10;jobs:&#10;  dry-run:&#10;    runs-on: ubuntu-latest&#10;    steps:&#10;      - name: Checkout&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Setup .NET&#10;        uses: actions/setup-dotnet@v4&#10;        with:&#10;          dotnet-version: 8.0.x&#10;&#10;      - name: Restore&#10;        run: dotnet restore&#10;&#10;      - name: Build Core&#10;        run: dotnet build StateMachineKit.Core/StateMachineKit.Core.csproj -c Release --no-restore&#10;&#10;      - name: Pack Core (no publish)&#10;        run: dotnet pack StateMachineKit.Core/StateMachineKit.Core.csproj -c Release --no-build -o ./artifacts/core&#10;&#10;      - name: Build Godot&#10;        run: dotnet build StateMachineKit.Godot/StateMachineKit.Godot.csproj -c Release --no-restore&#10;&#10;      - name: Pack Godot (no publish)&#10;        run: dotnet pack StateMachineKit.Godot/StateMachineKit.Godot.csproj -c Release --no-build -o ./artifacts/godot&#10;&#10;      - name: Upload Core nupkg&#10;        uses: actions/upload-artifact@v4&#10;        with:&#10;          name: core-nuget&#10;          path: artifacts/core/*.nupkg&#10;&#10;      - name: Upload Godot nupkg&#10;        uses: actions/upload-artifact@v4&#10;        with:&#10;          name: godot-nuget&#10;          path: artifacts/godot/*.nupkg&#10;" />
              <option name="updatedContent" value="name: Dry Run Package Build&#10;&#10;on:&#10;  workflow_dispatch:&#10;&#10;jobs:&#10;  dry-run:&#10;    runs-on: ubuntu-latest&#10;    steps:&#10;      - name: Checkout&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Setup .NET&#10;        uses: actions/setup-dotnet@v4&#10;        with:&#10;          dotnet-version: 8.0.x&#10;&#10;      - name: Restore&#10;        run: dotnet restore&#10;&#10;      - name: Build Core&#10;        run: dotnet build StateMachineKit.Core/StateMachineKit.Core.csproj -c Release --no-restore&#10;&#10;      - name: Pack Core (no publish)&#10;        run: dotnet pack StateMachineKit.Core/StateMachineKit.Core.csproj -c Release --no-build -o ./artifacts/core&#10;&#10;      - name: Build Godot&#10;        run: dotnet build StateMachineKit.Godot/StateMachineKit.Godot.csproj -c Release --no-restore&#10;&#10;      - name: Pack Godot (no publish)&#10;        run: dotnet pack StateMachineKit.Godot/StateMachineKit.Godot.csproj -c Release --no-build -o ./artifacts/godot&#10;&#10;      - name: Upload Core nupkg&#10;        uses: actions/upload-artifact@v4&#10;        with:&#10;          name: core-nuget&#10;          path: artifacts/core/*.nupkg&#10;&#10;      - name: Upload Godot nupkg&#10;        uses: actions/upload-artifact@v4&#10;        with:&#10;          name: godot-nuget&#10;          path: artifacts/godot/*.nupkg&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# StateMachineKit&#10;&#10;StateMachineKit is a flexible, plug-and-play finite state machine (FSM) toolkit for .NET / game development.&#10;It provides a lightweight abstraction for defining states, transitioning between them, and integrating with engines&#10;(such as Godot via the companion `StateMachineKit.Godot` package).&#10;&#10;## Packages&#10;&#10;| Package | Version | Description |&#10;|---------|---------|-------------|&#10;| StateMachineKit | 2.0.0 | Core abstractions (interfaces, discovery attribute, helpers) supporting .NET 8 and .NET Standard 2.1. |&#10;| StateMachineKit.Godot | 0.0.1 | Godot (C#) integration layer depending on the core package. |&#10;&#10;## Key Features&#10;- Generic, owner-driven state machine: `IStateMachine&lt;TContext&gt;` / `IState&lt;TContext&gt;`&#10;- Attribute-based automatic state discovery (`[DiscoverableState]`)&#10;- Extension methods for ticking (Update / FixedUpdate)&#10;- Pluggable design; you keep your concrete state definitions decoupled&#10;- Godot integration package for engine-specific hooks&#10;&#10;## Quick Start (Core)&#10;```csharp&#10;public sealed class IdleState : IState&lt;MyActor&gt; { /* ... */ }&#10;public sealed class MoveState : IState&lt;MyActor&gt; { /* ... */ }&#10;&#10;var actor = new MyActor(&quot;Player&quot;);&#10;var fsm = FiniteStateMachine.Create(actor);&#10;fsm.Initialize&lt;IdleState&gt;();&#10;&#10;// In your update loop&#10;fsm.Tick(deltaTime);&#10;```&#10;&#10;## Godot Integration&#10;Install the `StateMachineKit.Godot` NuGet package and reference it from your Godot C# project. The Godot layer&#10;adds engine-friendly owner definitions and can be extended to tie into lifecycle callbacks (`_Process`, `_PhysicsProcess`).&#10;&#10;## Versioning&#10;- Core at 2.0.0 introduces improved initialization semantics and packaging metadata&#10;- Godot integration starts at 0.0.1 (early preview)&#10;&#10;## Roadmap&#10;- Source generator for compile-time state registration&#10;- Transition validation &amp; visualization hooks&#10;- Async lifecycle (optional)&#10;&#10;## Contributing&#10;Issues and PRs are welcome. Please include tests for behavioral changes.&#10;&#10;## License&#10;MIT – see `license.md`.&#10;" />
              <option name="updatedContent" value="# StateMachineKit&#10;&#10;StateMachineKit is a flexible, plug-and-play finite state machine (FSM) toolkit for .NET / game development.&#10;It provides a lightweight abstraction for defining states, transitioning between them, and integrating with engines&#10;(such as Godot via the companion `StateMachineKit.Godot` package).&#10;&#10;## Packages&#10;&#10;| Package | Version | Description |&#10;|---------|---------|-------------|&#10;| StateMachineKit | 2.0.0 | Core abstractions (interfaces, discovery attribute, helpers) supporting .NET 8 and .NET Standard 2.1. |&#10;| StateMachineKit.Godot | 0.0.1 | Godot (C#) integration layer depending on the core package. |&#10;&#10;## Key Features&#10;- Generic, owner-driven state machine: `IStateMachine&lt;TContext&gt;` / `IState&lt;TContext&gt;`&#10;- Attribute-based automatic state discovery (`[DiscoverableState]`)&#10;- Extension methods for ticking (Update / FixedUpdate)&#10;- Pluggable design; you keep your concrete state definitions decoupled&#10;- Godot integration package for engine-specific hooks&#10;&#10;## Quick Start (Core)&#10;```csharp&#10;public sealed class IdleState : IState&lt;MyActor&gt; { /* ... */ }&#10;public sealed class MoveState : IState&lt;MyActor&gt; { /* ... */ }&#10;&#10;var actor = new MyActor(&quot;Player&quot;);&#10;var fsm = FiniteStateMachine.Create(actor);&#10;fsm.Initialize&lt;IdleState&gt;();&#10;&#10;// In your update loop&#10;fsm.Tick(deltaTime);&#10;```&#10;&#10;## Godot Integration&#10;Install the `StateMachineKit.Godot` NuGet package and reference it from your Godot C# project. The Godot layer&#10;adds engine-friendly owner definitions and can be extended to tie into lifecycle callbacks (`_Process`, `_PhysicsProcess`).&#10;&#10;## Versioning&#10;- Core at 2.0.0 introduces improved initialization semantics and packaging metadata&#10;- Godot integration starts at 0.0.1 (early preview)&#10;&#10;## Roadmap&#10;- Source generator for compile-time state registration&#10;- Transition validation &amp; visualization hooks&#10;- Async lifecycle (optional)&#10;&#10;## Contributing&#10;Issues and PRs are welcome. Please include tests for behavioral changes.&#10;&#10;## License&#10;MIT – see `license.md`.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/StateMachineKit.Core/StateMachineKit.Core.csproj">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/StateMachineKit.Core/StateMachineKit.Core.csproj" />
              <option name="originalContent" value="&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;&#10;&#10;    &lt;PropertyGroup&gt;&#10;        &lt;TargetFrameworks&gt;net8.0; netstandard2.1&lt;/TargetFrameworks&gt;&#10;        &lt;ImplicitUsings&gt;disable&lt;/ImplicitUsings&gt;&#10;        &lt;Nullable&gt;enable&lt;/Nullable&gt;&#10;        &lt;RootNamespace&gt;StateMachineKit.Core&lt;/RootNamespace&gt;&#10;        &#10;        &lt;Author&gt;Christos Maragkos&lt;/Author&gt;&#10;        &lt;PackageId&gt;StateMachineKit&lt;/PackageId&gt;&#10;        &lt;Version&gt;2.0.0&lt;/Version&gt;&#10;        &lt;GenerateDocumentationFile&gt;true&lt;/GenerateDocumentationFile&gt;&#10;        &lt;Description&gt;StateMachineKit is a library for creating and managing finite state machines within a game.&lt;/Description&gt;&#10;        &lt;PackageReadmeFile&gt;README.md&lt;/PackageReadmeFile&gt;&#10;        &lt;PackageLicenseFile&gt;license.md&lt;/PackageLicenseFile&gt;&#10;        &lt;RepositoryUrl&gt;https://github.com/REPLACE_ME/StateMachineKit&lt;/RepositoryUrl&gt;&#10;        &lt;RepositoryType&gt;git&lt;/RepositoryType&gt;&#10;        &lt;PackageTags&gt;state-machine;fsm;game-dev;ai&lt;/PackageTags&gt;&#10;    &lt;/PropertyGroup&gt;&#10;&#10;    &lt;ItemGroup&gt;&#10;        &lt;None Include=&quot;..\README.md&quot; Pack=&quot;true&quot; PackagePath=&quot;/&quot; Link=&quot;README.md&quot; /&gt;&#10;        &lt;None Include=&quot;..\license.md&quot; Pack=&quot;true&quot; PackagePath=&quot;/&quot; Link=&quot;license.md&quot; /&gt;&#10;    &lt;/ItemGroup&gt;&#10;&#10;&lt;/Project&gt;&#10;" />
              <option name="updatedContent" value="&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;&#10;&#10;    &lt;PropertyGroup&gt;&#10;        &lt;TargetFrameworks&gt;net8.0; netstandard2.1&lt;/TargetFrameworks&gt;&#10;        &lt;ImplicitUsings&gt;disable&lt;/ImplicitUsings&gt;&#10;        &lt;Nullable&gt;enable&lt;/Nullable&gt;&#10;        &lt;RootNamespace&gt;StateMachineKit.Core&lt;/RootNamespace&gt;&#10;        &#10;        &lt;Author&gt;Christos Maragkos&lt;/Author&gt;&#10;        &lt;PackageId&gt;StateMachineKit&lt;/PackageId&gt;&#10;        &lt;Version&gt;2.0.0&lt;/Version&gt;&#10;        &lt;GenerateDocumentationFile&gt;true&lt;/GenerateDocumentationFile&gt;&#10;        &lt;Description&gt;StateMachineKit is a library for creating and managing finite state machines within a game.&lt;/Description&gt;&#10;        &lt;PackageReadmeFile&gt;README.md&lt;/PackageReadmeFile&gt;&#10;        &lt;PackageLicenseFile&gt;license.md&lt;/PackageLicenseFile&gt;&#10;        &lt;RepositoryUrl&gt;https://github.com/REPLACE_ME/StateMachineKit&lt;/RepositoryUrl&gt;&#10;        &lt;RepositoryType&gt;git&lt;/RepositoryType&gt;&#10;        &lt;PackageTags&gt;state-machine;fsm;game-dev;ai&lt;/PackageTags&gt;&#10;    &lt;/PropertyGroup&gt;&#10;&#10;    &lt;ItemGroup&gt;&#10;        &lt;None Include=&quot;..\README.md&quot; Pack=&quot;true&quot; PackagePath=&quot;/&quot; Link=&quot;README.md&quot; /&gt;&#10;        &lt;None Include=&quot;..\license.md&quot; Pack=&quot;true&quot; PackagePath=&quot;/&quot; Link=&quot;license.md&quot; /&gt;&#10;    &lt;/ItemGroup&gt;&#10;&#10;&lt;/Project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/StateMachineKit.Godot/StateMachineKit.Godot.csproj">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/StateMachineKit.Godot/StateMachineKit.Godot.csproj" />
              <option name="originalContent" value="&lt;Project Sdk=&quot;Godot.NET.Sdk/4.4.1&quot;&gt;&#10;&#10;    &lt;PropertyGroup&gt;&#10;        &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;&#10;        &lt;EnableDynamicLoading&gt;true&lt;/EnableDynamicLoading&gt;&#10;        &lt;Nullable&gt;enable&lt;/Nullable&gt;&#10;        &lt;PackageId&gt;StateMachineKit.Godot&lt;/PackageId&gt;&#10;        &lt;Version&gt;0.0.1&lt;/Version&gt;&#10;        &lt;Description&gt;Godot integration layer for StateMachineKit finite state machine library.&lt;/Description&gt;&#10;        &lt;Authors&gt;Christos Maragkos&lt;/Authors&gt;&#10;        &lt;PackageReadmeFile&gt;README.md&lt;/PackageReadmeFile&gt;&#10;        &lt;PackageLicenseFile&gt;license.md&lt;/PackageLicenseFile&gt;&#10;        &lt;RepositoryUrl&gt;https://github.com/ChristosMaragkos/StateMachineKit&lt;/RepositoryUrl&gt;&#10;        &lt;RepositoryType&gt;git&lt;/RepositoryType&gt;&#10;        &lt;PackageTags&gt;godot;state-machine;fsm;game-dev;ai&lt;/PackageTags&gt;&#10;        &lt;GenerateAssemblyInfo&gt;false&lt;/GenerateAssemblyInfo&gt;&#10;        &lt;GenerateTargetFrameworkAttribute&gt;false&lt;/GenerateTargetFrameworkAttribute&gt;&#10;    &lt;/PropertyGroup&gt;&#10;&#10;    &lt;ItemGroup&gt;&#10;      &lt;ProjectReference Include=&quot;..\StateMachineKit.Core\StateMachineKit.Core.csproj&quot; /&gt;&#10;      &lt;None Include=&quot;..\README.md&quot; Pack=&quot;true&quot; PackagePath=&quot;/&quot; Link=&quot;README.md&quot; /&gt;&#10;      &lt;None Include=&quot;..\license.md&quot; Pack=&quot;true&quot; PackagePath=&quot;/&quot; Link=&quot;license.md&quot; /&gt;&#10;    &lt;/ItemGroup&gt;&#10;&#10;&lt;/Project&gt;&#10;" />
              <option name="updatedContent" value="&lt;Project Sdk=&quot;Godot.NET.Sdk/4.4.1&quot;&gt;&#10;&#10;    &lt;PropertyGroup&gt;&#10;        &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;&#10;        &lt;EnableDynamicLoading&gt;true&lt;/EnableDynamicLoading&gt;&#10;        &lt;Nullable&gt;enable&lt;/Nullable&gt;&#10;        &lt;PackageId&gt;StateMachineKit.Godot&lt;/PackageId&gt;&#10;        &lt;Version&gt;0.0.1&lt;/Version&gt;&#10;        &lt;Description&gt;Godot integration layer for StateMachineKit finite state machine library.&lt;/Description&gt;&#10;        &lt;Authors&gt;Christos Maragkos&lt;/Authors&gt;&#10;        &lt;PackageReadmeFile&gt;README.md&lt;/PackageReadmeFile&gt;&#10;        &lt;PackageLicenseFile&gt;license.md&lt;/PackageLicenseFile&gt;&#10;        &lt;RepositoryUrl&gt;https://github.com/ChristosMaragkos/StateMachineKit&lt;/RepositoryUrl&gt;&#10;        &lt;RepositoryType&gt;git&lt;/RepositoryType&gt;&#10;        &lt;PackageTags&gt;godot;state-machine;fsm;game-dev;ai&lt;/PackageTags&gt;&#10;        &lt;GenerateAssemblyInfo&gt;false&lt;/GenerateAssemblyInfo&gt;&#10;        &lt;GenerateTargetFrameworkAttribute&gt;false&lt;/GenerateTargetFrameworkAttribute&gt;&#10;    &lt;/PropertyGroup&gt;&#10;&#10;    &lt;ItemGroup&gt;&#10;      &lt;ProjectReference Include=&quot;..\StateMachineKit.Core\StateMachineKit.Core.csproj&quot; /&gt;&#10;      &lt;None Include=&quot;..\README.md&quot; Pack=&quot;true&quot; PackagePath=&quot;/&quot; Link=&quot;README.md&quot; /&gt;&#10;      &lt;None Include=&quot;..\license.md&quot; Pack=&quot;true&quot; PackagePath=&quot;/&quot; Link=&quot;license.md&quot; /&gt;&#10;    &lt;/ItemGroup&gt;&#10;&#10;&lt;/Project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/StateMachineKit.Tests/StateMachineKit.Tests.csproj">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/StateMachineKit.Tests/StateMachineKit.Tests.csproj" />
              <option name="originalContent" value="&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;&#10;  &lt;PropertyGroup&gt;&#10;    &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;&#10;    &lt;IsPackable&gt;false&lt;/IsPackable&gt;&#10;    &lt;Nullable&gt;enable&lt;/Nullable&gt;&#10;  &lt;/PropertyGroup&gt;&#10;  &lt;ItemGroup&gt;&#10;    &lt;PackageReference Include=&quot;xunit&quot; Version=&quot;2.9.0&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;xunit.runner.visualstudio&quot; Version=&quot;2.8.1&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Microsoft.NET.Test.Sdk&quot; Version=&quot;17.10.0&quot; /&gt;&#10;  &lt;/ItemGroup&gt;&#10;  &lt;ItemGroup&gt;&#10;    &lt;ProjectReference Include=&quot;..\StateMachineKit.Core\StateMachineKit.Core.csproj&quot; /&gt;&#10;    &lt;ProjectReference Include=&quot;..\StateMachineKit.Core.Reference\StateMachineKit.Core.Reference.csproj&quot; /&gt;&#10;  &lt;/ItemGroup&gt;&#10;&lt;/Project&gt;&#10;" />
              <option name="updatedContent" value="&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;&#10;  &lt;PropertyGroup&gt;&#10;    &lt;TargetFramework&gt;net8.0&lt;/TargetFramework&gt;&#10;    &lt;IsPackable&gt;false&lt;/IsPackable&gt;&#10;    &lt;Nullable&gt;enable&lt;/Nullable&gt;&#10;  &lt;/PropertyGroup&gt;&#10;  &lt;ItemGroup&gt;&#10;    &lt;PackageReference Include=&quot;xunit&quot; Version=&quot;2.9.0&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;xunit.runner.visualstudio&quot; Version=&quot;2.8.1&quot; /&gt;&#10;    &lt;PackageReference Include=&quot;Microsoft.NET.Test.Sdk&quot; Version=&quot;17.10.0&quot; /&gt;&#10;  &lt;/ItemGroup&gt;&#10;  &lt;ItemGroup&gt;&#10;    &lt;ProjectReference Include=&quot;..\StateMachineKit.Core\StateMachineKit.Core.csproj&quot; /&gt;&#10;    &lt;ProjectReference Include=&quot;..\StateMachineKit.Core.Reference\StateMachineKit.Core.Reference.csproj&quot; /&gt;&#10;  &lt;/ItemGroup&gt;&#10;&lt;/Project&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/license.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/license.md" />
              <option name="originalContent" value="MIT License&#10;&#10;Copyright (c) 2025 Christos Maragkos&#10;&#10;Permission is hereby granted, free of charge, to any person obtaining a copy&#10;of this software and associated documentation files (the &quot;Software&quot;), to deal&#10;in the Software without restriction, including without limitation the rights&#10;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#10;copies of the Software, and to permit persons to whom the Software is&#10;furnished to do so, subject to the following conditions:&#10;&#10;The above copyright notice and this permission notice shall be included in all&#10;copies or substantial portions of the Software.&#10;&#10;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#10;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#10;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#10;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#10;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#10;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#10;SOFTWARE.&#10;" />
              <option name="updatedContent" value="MIT License&#10;&#10;Copyright (c) 2025 Christos Maragkos&#10;&#10;Permission is hereby granted, free of charge, to any person obtaining a copy&#10;of this software and associated documentation files (the &quot;Software&quot;), to deal&#10;in the Software without restriction, including without limitation the rights&#10;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#10;copies of the Software, and to permit persons to whom the Software is&#10;furnished to do so, subject to the following conditions:&#10;&#10;The above copyright notice and this permission notice shall be included in all&#10;copies or substantial portions of the Software.&#10;&#10;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#10;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#10;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#10;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#10;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#10;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#10;SOFTWARE.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>